Steps for detecting fake news with Python
Follow the below steps for detecting fake news and complete your first advanced Python Project –

Make necessary imports:
-import numpy as np
-import pandas as pd
-import itertools
-from sklearn.model_selection import train_test_split
-from sklearn.feature_extraction.text import TfidfVectorizer
-from sklearn.linear_model import PassiveAggressiveClassifier
-from sklearn.metrics import accuracy_score, confusion_matrix

Now, let’s read the data into a DataFrame, and get the shape of the data and the first 5 records.

 #Read the data
 df=pd.read_csv('news.csv')
 #Get shape and head
 df.shape
 df.head()


And get the labels from the DataFrame.

 #DataFlair - Get the labels
 labels=df.label
 labels.head()
 
Split the dataset into training and testing sets.
 #DataFlair - Split the dataset
 x_train,x_test,y_train,y_test=train_test_split(df['text'], labels, test_size=0.2, random_state=7)
 
 
 Let’s initialize a TfidfVectorizer with stop words from the English language and a maximum document frequency of 0.7 (terms with a higher document frequency will be discarded). Stop words are the most common words in a language that are to be filtered out before processing the natural language data.
 And a TfidfVectorizer turns a collection of raw documents into a matrix of TF-IDF features.
Now, fit and transform the vectorizer on the train set, and transform the vectorizer on the test set.

  #DataFlair - Initialize a TfidfVectorizer
 tfidf_vectorizer=TfidfVectorizer(stop_words='english', max_df=0.7)
 #DataFlair - Fit and transform train set, transform test set
 tfidf_train=tfidf_vectorizer.fit_transform(x_train) 
 tfidf_test=tfidf_vectorizer.transform(x_test)
 
 Next, we’ll initialize a PassiveAggressiveClassifier. This is. We’ll fit this on tfidf_train and y_train.
Then, we’ll predict on the test set from the TfidfVectorizer and calculate the accuracy with accuracy_score() from sklearn.metrics. 

  #DataFlair - Initialize a PassiveAggressiveClassifier
 pac=PassiveAggressiveClassifier(max_iter=50)
 pac.fit(tfidf_train,y_train)
 #DataFlair - Predict on the test set and calculate accuracy
 y_pred=pac.predict(tfidf_test)
 score=accuracy_score(y_test,y_pred)
 print(f'Accuracy: {round(score*100,2)}%')
 
We got an accuracy of 92.82% with this model. Finally, let’s print out a confusion matrix to gain insight into the number of false and true negatives and positives.
 #DataFlair - Build confusion matrix
 confusion_matrix(y_test,y_pred, labels=['FAKE','REAL'])

So with this model, we have 589 true positives, 587 true negatives, 42 false positives, and 49 false negatives.

We took a political dataset, implemented a TfidfVectorizer, initialized a PassiveAggressiveClassifier, and fit our model. We ended up obtaining an accuracy of 92.82% in magnitude.



 
